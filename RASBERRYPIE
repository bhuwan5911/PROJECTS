import serial
import tkinter as tk
from tkinter import ttk
import time
from datetime import datetime
import threading
import math

class WeatherStationGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Weather Station Monitor")
        self.root.geometry("800x600")
        self.root.configure(bg='#1e1e1e')
        
        # Initialize serial connection
        try:
            self.ser = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
            print("Successfully connected to serial port")
        except Exception as e:
            print(f"Failed to connect to serial port: {e}")
            print("Running in simulation mode")
            self.ser = None
        
        self.setup_gui()
        self.setup_animations()
        self.update_data()
        
    def setup_gui(self):
        main_frame = ttk.Frame(self.root, padding=20)
        main_frame.pack(expand=True, fill='both')

        style = ttk.Style()
        style.configure('TFrame', background='#1e1e1e')
        style.configure('TLabel', background='#1e1e1e', foreground='#ffffff')
        style.configure('Header.TLabel', font=('Arial', 24, 'bold'))
        style.configure('Data.TLabel', font=('Arial', 48, 'bold'))

        header = ttk.Label(main_frame, text="Weather Station Monitor", style='Header.TLabel')
        header.pack(pady=20)

        self.temp_frame = self.create_data_frame(main_frame, "Temperature")
        self.humid_frame = self.create_data_frame(main_frame, "Humidity")
        self.rain_frame = self.create_data_frame(main_frame, "Rain Intensity")

        self.status_var = tk.StringVar(value="No Rain")
        status_label = ttk.Label(main_frame, textvariable=self.status_var, font=('Arial', 16), foreground='#00ff00')
        status_label.pack(pady=20)

        self.time_var = tk.StringVar()
        time_label = ttk.Label(main_frame, textvariable=self.time_var, font=('Arial', 12), foreground='#888888')
        time_label.pack()
        
    def create_data_frame(self, parent, title):
        frame = ttk.Frame(parent, padding=10)
        frame.pack(side='left', expand=True, padx=10)

        ttk.Label(frame, text=title, font=('Arial', 14)).pack()
        
        value_var = tk.StringVar(value="--")
        value_label = ttk.Label(frame, textvariable=value_var, style='Data.TLabel')
        value_label.pack()
        
        canvas = tk.Canvas(frame, width=100, height=100, bg='#1e1e1e', highlightthickness=0)
        canvas.pack(pady=10)
        
        return {'frame': frame, 'value': value_var, 'canvas': canvas}
        
    def setup_animations(self):
        self.animation_angle = 0
        self.rain_drops = []

    def animate_temperature(self, canvas, value):
        canvas.delete('all')
        center_x, center_y = 50, 50
        canvas.create_oval(center_x-10, center_y-10, center_x+10, center_y+10, fill='red', outline='white')
        canvas.create_rectangle(center_x-5, center_y-30, center_x+5, center_y, fill='red', outline='white')
        
        try:
            temp = float(value.split()[0])
            height = min(30, max(5, temp / 2))
            canvas.create_rectangle(center_x-3, center_y-height, center_x+3, center_y, fill='#ff0000')
        except:
            pass
            
    def animate_humidity(self, canvas, value):
        canvas.delete('all')
        self.animation_angle += 5
        center_x, center_y = 50, 50
        radius = 30
        points = []
        for i in range(8):
            angle = math.radians(i * 45 + self.animation_angle)
            x = center_x + radius * math.cos(angle)
            y = center_y + radius * math.sin(angle)
            points.extend([x, y])
        canvas.create_polygon(points, fill='#0088ff', outline='white')
        
    def animate_rain(self, canvas, intensity):
        canvas.delete('all')
        if len(self.rain_drops) < 10:
            self.rain_drops.append([50, 0])
        new_drops = []
        for drop in self.rain_drops:
            drop[1] += 5
            if drop[1] < 100:
                canvas.create_oval(drop[0]-2, drop[1]-5, drop[0]+2, drop[1], fill='#00ffff')
                new_drops.append(drop)
        self.rain_drops = new_drops
        
    def update_data(self):
        try:
            if self.ser and self.ser.in_waiting > 0:
                line = self.ser.readline().decode('utf-8').strip()
                if line.startswith("*") and line.endswith("#"):
                    data = line[1:-1].split(",")
                    temp, humid, rain, is_raining = data
                    
                    self.temp_frame['value'].set(f"{temp} Â°C")
                    self.humid_frame['value'].set(f"{humid} %")
                    self.rain_frame['value'].set(f"{rain} %")
                    self.status_var.set("Raining" if is_raining == "1" else "No Rain")

                    self.animate_temperature(self.temp_frame['canvas'], self.temp_frame['value'].get())
                    self.animate_humidity(self.humid_frame['canvas'], self.humid_frame['value'].get())
                    self.animate_rain(self.rain_frame['canvas'], float(rain))
            else:
                self.animate_temperature(self.temp_frame['canvas'], self.temp_frame['value'].get())
                self.animate_humidity(self.humid_frame['canvas'], self.humid_frame['value'].get())
                self.animate_rain(self.rain_frame['canvas'], 50)
                
        except Exception as e:
            print(f"Error updating data: {e}")

        self.time_var.set(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        self.root.after(100, self.update_data)

if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = WeatherStationGUI(root)
        root.mainloop()
    except Exception as e:
        print(f"Error starting application: {e}")
